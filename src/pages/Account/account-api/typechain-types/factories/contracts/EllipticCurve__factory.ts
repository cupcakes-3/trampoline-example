/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  EllipticCurve,
  EllipticCurveInterface,
} from "../../contracts/EllipticCurve";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "x1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y1",
        type: "uint256",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "x2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y2",
        type: "uint256",
      },
    ],
    name: "addAndReturnProjectivePoint",
    outputs: [
      {
        internalType: "uint256[3]",
        name: "P",
        type: "uint256[3]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "z0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "x1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "z1",
        type: "uint256",
      },
    ],
    name: "addProj",
    outputs: [
      {
        internalType: "uint256",
        name: "x2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "z2",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "isOnCurve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y0",
        type: "uint256",
      },
    ],
    name: "isZeroCurve",
    outputs: [
      {
        internalType: "bool",
        name: "isZero",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "scalar",
        type: "uint256",
      },
    ],
    name: "multipleGeneratorByScalar",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "exp",
        type: "uint256",
      },
    ],
    name: "multiplyPowerBase2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "scalar",
        type: "uint256",
      },
    ],
    name: "multiplyScalar",
    outputs: [
      {
        internalType: "uint256",
        name: "x1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y1",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "z0",
        type: "uint256",
      },
    ],
    name: "toAffinePoint",
    outputs: [
      {
        internalType: "uint256",
        name: "x1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y1",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y0",
        type: "uint256",
      },
    ],
    name: "toProjectivePoint",
    outputs: [
      {
        internalType: "uint256[3]",
        name: "P",
        type: "uint256[3]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y0",
        type: "uint256",
      },
    ],
    name: "twice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "z0",
        type: "uint256",
      },
    ],
    name: "twiceProj",
    outputs: [
      {
        internalType: "uint256",
        name: "x1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "z1",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "message",
        type: "bytes32",
      },
      {
        internalType: "uint256[2]",
        name: "rs",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2]",
        name: "Q",
        type: "uint256[2]",
      },
    ],
    name: "validateSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "zeroAffine",
    outputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "zeroProj",
    outputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50612059806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063713eca2811610097578063c30cfa2d11610066578063c30cfa2d146102ee578063c80edca41461031e578063e022d77c14610350578063f214aba014610381576100f5565b8063713eca281461023e57806372fb4a141461026e5780637ec8da8d1461029f57806384dfba46146102cf576100f5565b80630b0dbcfa116100d35780630b0dbcfa1461018c57806314c67060146101bc578063322b24aa146101dc578063675ca0431461020d576100f5565b806304e960d7146100fa57806309d3ef311461012a5780630afb4ddc1461015b575b600080fd5b610114600480360381019061010f9190611baa565b6103b3565b6040516101219190611c18565b60405180910390f35b610144600480360381019061013f9190611c33565b610744565b604051610152929190611c82565b60405180910390f35b61017560048036038101906101709190611cab565b610778565b604051610183929190611c82565b60405180910390f35b6101a660048036038101906101a19190611c33565b6107cf565b6040516101b39190611c18565b60405180910390f35b6101c4610a18565b6040516101d393929190611cd8565b60405180910390f35b6101f660048036038101906101f19190611d0f565b610a2d565b604051610204929190611c82565b60405180910390f35b61022760048036038101906102229190611d0f565b610a90565b604051610235929190611c82565b60405180910390f35b61025860048036038101906102539190611d62565b610b32565b6040516102659190611e74565b60405180910390f35b61028860048036038101906102839190611d0f565b610b67565b604051610296929190611c82565b60405180910390f35b6102b960048036038101906102b49190611c33565b610c6d565b6040516102c69190611e74565b60405180910390f35b6102d7610d9a565b6040516102e5929190611c82565b60405180910390f35b61030860048036038101906103039190611c33565b610da8565b6040516103159190611c18565b60405180910390f35b61033860048036038101906103339190611d0f565b610dd2565b60405161034793929190611cd8565b60405180910390f35b61036a60048036038101906103659190611d62565b611314565b604051610378929190611c82565b60405180910390f35b61039b60048036038101906103969190611e8f565b61134e565b6040516103aa93929190611cd8565b60405180910390f35b600080836000600281106103ca576103c9611f1c565b5b6020020151148061041357507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325518360006002811061040b5761040a611f1c565b5b602002015110155b80610436575060008360016002811061042f5761042e611f1c565b5b6020020151145b15610444576000905061073d565b61047e8260006002811061045b5761045a611f1c565b5b60200201518360016002811061047457610473611f1c565b5b60200201516107cf565b61048b576000905061073d565b60008060008060006104d5886001600281106104aa576104a9611f1c565b5b60200201517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551611507565b90506105567f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2967f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f57fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325518061054b5761054a611f4b565b5b848d60001c09610b67565b80945081965050506105e28760006002811061057557610574611f1c565b5b60200201518860016002811061058e5761058d611f1c565b5b60200201517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551806105c2576105c1611f4b565b5b848c6000600281106105d7576105d6611f1c565b5b602002015109610b67565b809350819550505060006105f886858786610b32565b90506000816002600381106106105761060f611f1c565b5b6020020151141561062a576000965050505050505061073d565b600061066e8260026003811061064357610642611f1c565b5b60200201517fffffffff00000001000000000000000000000000ffffffffffffffffffffffff611507565b90507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061069f5761069e611f4b565b5b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806106ce576106cd611f4b565b5b828309836000600381106106e5576106e4611f1c565b5b60200201510990508960006002811061070157610700611f1c565b5b60200201517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551826107329190611f7a565b149750505050505050505b9392505050565b600080600061075585856001610dd2565b80935081965082975050505061076c858583610a90565b92509250509250929050565b6000806107c67f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2967f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f585610b67565b91509150915091565b600082600014806107ff57507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff83145b8061080a5750816000145b8061083457507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82145b156108425760009050610a12565b60007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061087357610872611f4b565b5b838409905060007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806108a9576108a8611f4b565b5b857fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806108d9576108d8611f4b565b5b87880909905060007fffffffff00000001000000000000000000000000fffffffffffffffffffffffc1461098d577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061093657610935611f4b565b5b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061096557610964611f4b565b5b7fffffffff00000001000000000000000000000000fffffffffffffffffffffffc8709820890505b60007f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b14610a0a577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806109e4576109e3611f4b565b5b7f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b820890505b808214925050505b92915050565b60008060008060016000925092509250909192565b6000806000859050600085905060006001905060005b86811015610a7557610a56848484610dd2565b8094508195508296505050508080610a6d90611fda565b915050610a43565b50610a81838383610a90565b94509450505050935093915050565b6000806000610abf847fffffffff00000001000000000000000000000000ffffffffffffffffffffffff611507565b90507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610af057610aef611f4b565b5b81870992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610b2457610b23611f4b565b5b818609915050935093915050565b610b3a6119c6565b600080610b4987878787611314565b8092508193505050610b5b8282610c6d565b92505050949350505050565b6000806000831415610b8457610b7b610d9a565b91509150610c65565b6001831415610b9857848491509150610c65565b6002831415610bb457610bab8585610744565b91509150610c65565b600085905060008590506000600190506000600190508895508794506000600288610bdf9190611f7a565b1415610bed57600094508495505b600187901c96505b6000871115610c5157610c09848484610dd2565b8094508195508296505050506001600288610c249190611f7a565b1415610c4557610c3884848489898661134e565b8093508197508298505050505b600187901c9650610bf5565b610c5c868683610a90565b95509550505050505b935093915050565b610c756119c6565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610ca457610ca3611f4b565b5b600160000881600260038110610cbd57610cbc611f1c565b5b6020020181815250507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610cf557610cf4611f4b565b5b81600260038110610d0957610d08611f1c565b5b6020020151840981600060038110610d2457610d23611f1c565b5b6020020181815250507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610d5c57610d5b611f4b565b5b81600260038110610d7057610d6f611f1c565b5b6020020151830981600160038110610d8b57610d8a611f1c565b5b60200201818152505092915050565b600080600080915091509091565b60008083148015610db95750600082145b15610dc75760019050610dcc565b600090505b92915050565b6000806000806000806000610de78a8a610da8565b15610e0357610df4610a18565b9650965096505050505061130b565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610e3257610e31611f4b565b5b888a0992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610e6657610e65611f4b565b5b6002840992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610e9b57610e9a611f4b565b5b8a840991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610ecf57610ece611f4b565b5b89830991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610f0357610f02611f4b565b5b6002830991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610f3857610f37611f4b565b5b8a8b0999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610f6c57610f6b611f4b565b5b60038b0993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610fa157610fa0611f4b565b5b88890997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610fd557610fd4611f4b565b5b7fffffffff00000001000000000000000000000000fffffffffffffffffffffffc890997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061102957611028611f4b565b5b88850893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061105d5761105c611f4b565b5b84850990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061109157611090611f4b565b5b8260020999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806110c6576110c5611f4b565b5b8a7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03820890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061111c5761111b611f4b565b5b817fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03830899507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061117257611171611f4b565b5b8a850999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806111a6576111a5611f4b565b5b838a0998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806111da576111d9611f4b565b5b898a0998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061120e5761120d611f4b565b5b8960020998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061124357611242611f4b565b5b897fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038b0895507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061129957611298611f4b565b5b81840996507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806112cd576112cc611f4b565b5b83840994507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061130157611300611f4b565b5b8386099450505050505b93509350939050565b6000806000611329878760018888600161134e565b809350819850829950505050611340878783610a90565b925092505094509492505050565b60008060008060008060006113638d8d610da8565b1561137a57898989965096509650505050506114fb565b6113848a8a610da8565b1561139b578c8c8c965096509650505050506114fb565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806113ca576113c9611f4b565b5b888d0993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806113fe576113fd611f4b565b5b8b8a0992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061143257611431611f4b565b5b888e0991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061146657611465611f4b565b5b8b8b099050808214156114ac5782841415611495576114868d8d8d610dd2565b965096509650505050506114fb565b61149d610a18565b965096509650505050506114fb565b6114ea7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806114de576114dd611f4b565b5b898d09838386886115c0565b809750819850829950505050505050505b96509650969350505050565b60008083148061151657508183145b806115215750600082145b1561152f57600090506115ba565b818311156115465781836115439190611f7a565b92505b600080600190506000849050600086905060005b600082146115965781838161157257611571611f4b565b5b0490508384820286038384840286038095508196508297508398505050505061155a565b60008512156115b157846000038703955050505050506115ba565b84955050505050505b92915050565b6000806000806000806000807fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806115fb576115fa611f4b565b5b8a7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038a0890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061165157611650611f4b565b5b8b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038d0894507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806116a7576116a6611f4b565b5b85860993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806116db576116da611f4b565b5b81820991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061170f5761170e611f4b565b5b8d830991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061174357611742611f4b565b5b8c8c089a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061177757611776611f4b565b5b848c099a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806117ab576117aa611f4b565b5b8b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03830891507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061180157611800611f4b565b5b82860997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061183557611834611f4b565b5b85850992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061186957611868611f4b565b5b848d099b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061189d5761189c611f4b565b5b827fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038d089b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806118f3576118f2611f4b565b5b8c820990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061192757611926611f4b565b5b838a0998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061195b5761195a611f4b565b5b897fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03820896507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806119b1576119b0611f4b565b5b8d840995505050505050955095509592505050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b6000819050919050565b611a0a816119f7565b8114611a1557600080fd5b50565b600081359050611a2781611a01565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a7b82611a32565b810181811067ffffffffffffffff82111715611a9a57611a99611a43565b5b80604052505050565b6000611aad6119e8565b9050611ab98282611a72565b919050565b600067ffffffffffffffff821115611ad957611ad8611a43565b5b602082029050919050565b600080fd5b6000819050919050565b611afc81611ae9565b8114611b0757600080fd5b50565b600081359050611b1981611af3565b92915050565b6000611b32611b2d84611abe565b611aa3565b90508060208402830185811115611b4c57611b4b611ae4565b5b835b81811015611b755780611b618882611b0a565b845260208401935050602081019050611b4e565b5050509392505050565b600082601f830112611b9457611b93611a2d565b5b6002611ba1848285611b1f565b91505092915050565b600080600060a08486031215611bc357611bc26119f2565b5b6000611bd186828701611a18565b9350506020611be286828701611b7f565b9250506060611bf386828701611b7f565b9150509250925092565b60008115159050919050565b611c1281611bfd565b82525050565b6000602082019050611c2d6000830184611c09565b92915050565b60008060408385031215611c4a57611c496119f2565b5b6000611c5885828601611b0a565b9250506020611c6985828601611b0a565b9150509250929050565b611c7c81611ae9565b82525050565b6000604082019050611c976000830185611c73565b611ca46020830184611c73565b9392505050565b600060208284031215611cc157611cc06119f2565b5b6000611ccf84828501611b0a565b91505092915050565b6000606082019050611ced6000830186611c73565b611cfa6020830185611c73565b611d076040830184611c73565b949350505050565b600080600060608486031215611d2857611d276119f2565b5b6000611d3686828701611b0a565b9350506020611d4786828701611b0a565b9250506040611d5886828701611b0a565b9150509250925092565b60008060008060808587031215611d7c57611d7b6119f2565b5b6000611d8a87828801611b0a565b9450506020611d9b87828801611b0a565b9350506040611dac87828801611b0a565b9250506060611dbd87828801611b0a565b91505092959194509250565b600060039050919050565b600081905092915050565b6000819050919050565b611df281611ae9565b82525050565b6000611e048383611de9565b60208301905092915050565b6000602082019050919050565b611e2681611dc9565b611e308184611dd4565b9250611e3b82611ddf565b8060005b83811015611e6c578151611e538782611df8565b9650611e5e83611e10565b925050600181019050611e3f565b505050505050565b6000606082019050611e896000830184611e1d565b92915050565b60008060008060008060c08789031215611eac57611eab6119f2565b5b6000611eba89828a01611b0a565b9650506020611ecb89828a01611b0a565b9550506040611edc89828a01611b0a565b9450506060611eed89828a01611b0a565b9350506080611efe89828a01611b0a565b92505060a0611f0f89828a01611b0a565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f8582611ae9565b9150611f9083611ae9565b925082611fa057611f9f611f4b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fe582611ae9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561201857612017611fab565b5b60018201905091905056fea2646970667358221220ee2b58152367b8b1bb8a4f0415f28611527e3d9a2b7b09d1c3d2789ba300f34564736f6c634300080c0033";

type EllipticCurveConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EllipticCurveConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EllipticCurve__factory extends ContractFactory {
  constructor(...args: EllipticCurveConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EllipticCurve> {
    return super.deploy(overrides || {}) as Promise<EllipticCurve>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EllipticCurve {
    return super.attach(address) as EllipticCurve;
  }
  override connect(signer: Signer): EllipticCurve__factory {
    return super.connect(signer) as EllipticCurve__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EllipticCurveInterface {
    return new utils.Interface(_abi) as EllipticCurveInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EllipticCurve {
    return new Contract(address, _abi, signerOrProvider) as EllipticCurve;
  }
}
